#!/usr/bin/env ruby

$options = ''
while ARGV[0]=~/^-/ do
  $options += ARGV.shift
end
$options.freeze
$dark = true

module CommandLine

def self.help
  puts <<EOT
Usage: dfc [ci,ci!,co,co!,shred,shred!,rmkey] key <filename>
	ci      creates a new key with the file's content
	ci!     overwrites an existing key with the file's content
	co      creates a new file with the key's content
	co!     overwrites a file with the key's content
	shred   creates a new key with the file's content and then deletes the file
	shred!  overwrites a key with the file's content and then deletes the file
	rmkey   deletes key
EOT
  exit
end

CommandLine.help if $options=~/-h/

require 'dfc'

if $options=~/-v\b/ || $options=~/--version\b/ then
  puts DFC::VERSION
  exit
end

hidden = DFC::HIDDEN
if !File.exist?(hidden) then
  DFC::Install.install
end

dark, depository = DFC.dark, DFC.depository
recognized = (dark+depository).inject(true){|boolean,directory| boolean && File.exist?(directory)}

if !recognized then

  puts <<EOT
Did not recognize #{hidden} as a directory for this application.
Expected to see:
EOT
  puts dark
  puts depository
  puts <<EOT
It's possible there's an applicaction collision for #{hidden}, or
that there was a failed installation attempt.
EOT
  exit

end

command  = ARGV.shift
key      = ARGV.shift
filename = ARGV.shift

if command == 'log' then
  log = File.join(hidden,'log')
puts log
  if File.exist?(log) then
    if key == 'clear' then
      puts File.unlink(log)
    else
      puts File.read(log)
    end
  else
    puts "No log file found"
  end
  exit # EXIT
end

CommandLine.help if	(!filename && !(command=='rmkey')) ||
			!key ||
			!['ci','co','ci!','co!','shred','shred!','rmkey'].include?(command) ||
			(filename && (command == 'rmkey'))

password = Password.get("Password: ")
database = DFC::Database.new(dark,password)
while !(passphrase = database['passphrase']) do
  sleep(1)
  print "Forget your password(Y/n)? "
  if $stdin.gets.strip == 'Y' then
    DFC::Install.reset
    puts "OK, now back to where we were..."
  end
  password = Password.get("Password: ")
  database = DFC::Database.new(dark,password)
end

# Switch to the synch depositories unless we are to stay dark
$dark = ($options=~/--dark\b/)? true : false
$dark.freeze
database = DFC::Database.new(depository,passphrase) unless $dark

def self.execute(database,command,key,filename)
  log = ($dark)? false : true
  case command
    when 'ci'   then database.ci( key, filename, false )
    when 'ci!'  then database.ci( key, filename, true )
    when 'co'   then database.co( key, filename, false )
    when 'co!'  then database.co( key, filename, true )
    when 'shred'
      database.ci( filename, key, false )
      system( "shred -u '#{filename}'" )
    when 'shred!'
      database.ci( filename, key, true )
      system( "shred -u '#{filename}'" )
    when 'rmkey' then database.delete( key )
    else
      log = false
      puts "Hmmm... missing command? Send me a bug report."
  end
  if log then
    File.open( File.join(DFC::HIDDEN,'log'), 'a', 0600 ){|fh| fh.puts "#{Time.now}\t#{command}\t#{filename}\t#{key}\t#{$options}" }
  end
end

begin
  CommandLine.execute(database,command,key,filename)
rescue Exception
  puts $!
  puts $!.backtrace
end

end
